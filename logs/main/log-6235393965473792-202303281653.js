function LoadSketchAPIMain() {
    return {"title":"Jungle adventure","author":{"nickname":"Infinite coder","link":"https://www.khanacademy.org/profile/markusprograms/"},"size":{"width":600,"height":600},"link":"https://www.khanacademy.org/computer-programming/jungle-adventure/6235393965473792","img":"https://www.khanacademy.org/computer-programming/jungle-adventure/6235393965473792/5723354146848768.png","created":"2022-10-15T19:38:54.654081Z","flags":{"flags":null,"flaggedBy":null},"type":"pjs","code":"/*\n>>> Jungle adventure &lt;&lt;&lt;\nby Infinite coder\n\nstarted:  14-10-2022\nfinished: 15-10-2022\nreleased: 15-10-2022\n\nHow to play:\n    1. Use WASD or arrow keys to move. \n    2. Don't touch the spikes. \n    3. Go to the portal to advance. \n*/\n\nvar maps = [\n    [\n        \".............................,,,,,,,,,,,.......\",\n        \"..........................wwwxxxxxxxxxxx.......\",\n        \".@.......XXX.................XXXXXXXXXXx,......\", \n        \".,,...,.XXcXXX.........ww....XXXXXXXXXXXx......\", \n        \".xx.,.x.XccXcX...............XXXXXXXXXXXx,.....\", \n        \"Ax,,x,..cccccX.....www.......XXXXXXXXXXXXx.....\", \n        \"xxxxxx,,cccccc.ww............XXXXXXXXXXXXx,....\", \n        \"XXXXXxxxcccccX,ww,,,,,,,,,,,,XXXXXXXXXXXXXx,,,*\", \n        \"....XXXXXXaaXXxxxxxxxxxxxxxxxXXXXXXXXXXXXXXxxxx\", \n        \".......XXXXXXX.................................\", \n    ], \n    [\n        \"...............................................\", \n        \"...XXXXX..........XXXXXXXXXXXXX.......XXXX...XX\", \n        \"..XccXccXX.......XccXXcccXcccXcX.....XcccX....X\", \n        \"..XccXcccX.......XccXccccccccXccX.....XcccX...X\", \n        \"..XccccccX......XccccccccccccccccX...XcccccX..X\", \n        \".@ccccccccX.....XcccccccccccccccX....XcccccX..X\", \n        \".XccccXcccX....XccccccXcccXaacXcX....ccccccX.*X\", \n        \".XccaXXaccc,,,,cccaXaaXaaaXXXaXccX,,,ccacccc.XX\", \n        \".XXXXXXXXXXxxxxXXXXXXXXXXXXXXXXXXXxxxXXXXXXXxXX\"\n    ], \n    [\n        \"XXXXX........XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \n        \"Xcccc.......*XccccccccccccccccccccccccccccccccX\", \n        \"Xcccc...xxx.XcccccccccccccccccccccccccccccccccX\", \n        \"XccccX......XccccccccccccccccccccccccccccccXccX\", \n        \"XXXcccX.....XccccccccccccccccccccccccccccccXccX\", \n        \"XcccccX....XccccccccccccccccccccccccccccccXXcaX\", \n        \"XcccXXX.@..ccccccccccXcccccccaXXcccXXaccccXXcXX\", \n        \"XXccccX,,,,ccccaXaaXaXaacccaXXcccccccXXacXcXccX\", \n        \"XcXccccxxxxXXXXXXXXXXXXXaaXXaaaaaaaaaaaXXccXccX\", \n        \"XcccccccccccccccccccccccXXXXXXXXXXXXXXXccccXccX\", \n        \"XcccXccccccccccccccccccccccccccccccccccccccXacX\", \n        \"XccccccccccccXccccccccccccccccccccccccccccccXcX\", \n        \"XaaaaaXcccccaXaaXcccaXcccaXcccaXccccccccaXccccX\", \n        \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \n    ], \n    [\n        \"...............................................\", \n        \"...@...........................................\", \n        \"...,..............XXX..XX..XX..XX..XX..XX..XX.X\", \n        \"...x..............XcX..XX..XX..XX..XX..XX..XX.X\", \n        \".................XccX..XX..XX..XX..XX..XX..XX.X\", \n        \".................XccX..XX..XX..XX..XX..XX..XX.X\", \n        \"................XcccX..XX..XX..XX..XX..XX..XX.X\", \n        \"................XcccX..XX..XX..XX..XX..XX..XX.X\",\n        \"............X..XccccX..XX..XX..XX..XX..XX..XX.X\", \n        \"...............cccccXAAXXAAXX*,XXAAXXAAXXAAXXAX\", \n        \"...........X...cccccXxxxxxxxxxxxxxxxxxxxxxxxxxx\", \n        \"AAAA,XAAXAAXXAXccaccccccccccccccccccccccccccccX\", \n        \"xxxxxxxxxxxxxxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \n    ], \n    [\n        \"XXXXXXXXXXXXXXX\", \n        \"XcccccccccccccX\", \n        \"XccccXXXXXXaXcX\", \n        \"XccccXccccccccX\", \n        \"XccccXcXaXXXXXX\", \n        \"XcccaXccccccccX\", \n        \"XcXaXXXXXXccccX\", \n        \"XcXXcX.@.XccXcX\", \n        \"XcXXcc,,,ccXccX\", \n        \"XccXXXxxxXXaaaX\", \n        \"XccccccccccXXXX\", \n        \".XXXXXccccccccX\", \n        \"..ccccXXaXaXccX\", \n        \"*.ccccccccccccX\", \n        \"XXXXXXXXXXXXXXX\"\n        \n    ], \n    [\n        \"*\",\n        \"X   X   X   X   X   X   X   XX   X\",\n        \"                                 XX\",\n        \"                                 X  XXXXXXXXXXX\",\n        \"                           XXXXcXXXXccccccccccc XXXXX\",\n        \"                         XXccccccccccccccccccccXccccccX\",\n        \"                        XcccccccXXaXaXaXaXXcccccccccccX\",\n        \"                       XcccccccccccccccccccXaaXcccccccX\",\n        \"                       ccXccccccccccccccccccccccccccccX\",\n        \"                      XcccccccccccccccccccccccccccccccX\",\n        \"                      XXXXaaXaaXaaXaaXaaXaaXaaXaaXaaXcX\",\n        \"@     A   A   A   A   ccccccccccccccccccccccccccccccccX\",\n        \"xxxxxxxxxxxxxxxxxxxxxxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \",\n    ],\n    [], /** YOUR LEVEL DATA HERE */\n];\nvar comments = [\n    [\n        \"Don't fall!\", -50, 200, false, \n        \"Use WASD or arrow keys\\nto move. \", 150, 50, false, \n        \"Spikes hurt you. \", 450, 250, true, \n        \"Continue >>>>>\", 1400, -100, false, \n        \"^ UP ^\", 640, 180, false, \n        \"^ UP ^\", 820, 140, false, \n        \"^ UP ^\", 960, 60, false, \n        \"Go to the portal to advance. \", 1875, 260, false\n    ], \n    [\n        \"More caves\", 300, 200, true, \n        \"Extra hard\", 800, 200, true, \n        \"The end üòà\", 1200, 200, true\n    ], \n    [\n        \"Continue >>>\", 520, 300, true, \n        \"Long jump\", 975, 200, true, \n        \"So many spikes\", 1340, 300, true, \n        \"It IS possible to win without losing lives\\n(only official levels)\", 1340, 450, true, \n        \"Finally here\", 380, 0, false\n    ], \n    [\n        \"Jump!!!\", 220, 140, false,\n        \"Where is the portal?\", 1000, 0, false,\n    ],\n    [\n        \"A maze ...\", 300, 220, true, \n        \"... with spikes\", 500, 220, true\n    ], \n    [\n        \"[By SP]\", 125, 460, false,\n        \"Hurdles...\", 150, 400, false, \n        \"Done!\", 800, 400, false, \n        \"Spelunking... my favorite!\", 1000, 460, true, \n        \"Yikes, don't jump!\", 1300, 460, true, \n        \"Don't impale yourself either!\", 1800, 360, true, \n        \"Fresh air!\", 825, 275, false, \n        \"Tight fit!\", 1250, 100, false, \n        \"The end is near!\", 2000, 75, false,\n        \"What's down there?\\nv\", 2140, 160, false,\n        \"Don't you just love rhythm parkour?\", 750, -100, false,\n    ],\n    [] /** YOUR COMMENTS HERE */\n];\nvar level = 0;\n\nvar mapWidth = 15;\nvar mapHeight = 15;\nvar mouse = false;\nvar levelStarted = false;\nvar x = 0;\nvar y = 0;\nvar plSpeed = 2.5;\nvar falling;\nvar moveRight;\nvar moveLeft;\nvar jumping = 0;\nvar jumpDir = true;\nvar canJump;\nvar lives = 3;\nvar damage;\nvar playing = false;\nvar page = \"menu\";\nvar continuePlaying = false;\nvar pl = false;\nvar winners = [\n    \"OwenS\", \"noah\", \"SP\", \"TheMCPlayr\", \"Animator101\", \"Wort-Head Productionsüòê\", \"...\", \"jamesb\", \"TheDoughSmith\", \"HB_the_Pencil\", \"TheMoneyLord(TML)\", \"Cheesecake Programming\", \"C–§–Ø–Ø–¶PŒì\", \"üî• üî•‰πá„É†Ôæë‚àöÔæë‰∏Çüî•üî•\", \"TEXAN7 #JesusIsKing\", \"ü•ØPunBunü•Ø\", \"Jeremy Vaughn\", \"Aqualine619\", \"shrek\", \"Vfd Ftgykg\", \"David\", \"windawine\", \"Monil Mehta\", \"Daniel Y\", \"most_dangerous_noodle\", \"gomezaleeyah\", \"NJP\", \"lafcjackattack21\"\n];\nvar keys = [];\nvar keys2 = [];\n\nvar tf = createFont(\"Helvetica\", 20);\ntextFont(createFont(\"Gabriola Bold\"));\ntextAlign(CENTER, CENTER);\n\n// {\nvar grass = [\n    [\n        color(200, 255, 250), \n        color(0, 127, 0), \n        color(0, 200, 0), \n        color(0, 255, 0)\n    ], \n    [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 2, 2, 0, 2, 0, 0, 3, 0, 3, 0, 0, 0, 2, 0, 0, \n        0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 3, \n        1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 2, \n        1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n    ], \n    [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        3, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 2, 0, 2, 0, 0, 3, 0, 0, 3, 0, 0, 0, 2, 0, 0, \n        0, 1, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 2, 1, 0, 3, \n        0, 1, 0, 1, 0, 1, 2, 0, 0, 1, 1, 0, 1, 0, 2, 0, \n        1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, \n    ], \n    [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        3, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        3, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 2, 0, 0, \n        2, 0, 2, 2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 1, 0, 2, \n        2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 1, 0, 2, \n        1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, \n    ]\n];\nvar dirt = [\n    [\n        color(84, 32, 0), \n        color(191, 86, 0), \n        color(186, 56, 0), \n        color(122, 51, 0), \n        color(0, 127, 0), \n        color(0, 200, 0), \n        color(0, 255, 0)\n    ], \n    [], \n];\nfor (var i = 0; i &lt; 16 * 16; i ++) {\n    dirt[1].push(round(random(0, dirt[0].length - 1)));\n}\nvar stone = [\n    [\n        color(0, 0, 0), \n        color(50, 50, 50), \n        color(100, 100, 100), \n        color(150, 150, 150), \n    ], \n    [], \n    [], \n];\nfor (var i = 0; i &lt; 16 * 16; i ++) {\n    stone[1].push(round(random(0, stone[0].length - 1)));\n}\nfor (var i = 0; i &lt; 16 * 16; i ++) {\n    stone[2].push(round(random(0, 1)));\n}\nvar portal = [\n    [\n        color(200, 255, 250),\n        color(255, 200, 50), \n        color(205, 150, 0)\n    ], \n    [\n        0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, \n        0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, \n        0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, \n        0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, \n        2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, \n        2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, \n        2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, \n        2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, \n        2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, \n        2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, \n        0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, \n        0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, \n        0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, \n        0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, \n    ]\n];\nvar wood = [\n    [\n        color(255, 128, 0), \n        color(135, 45, 0), \n        color(66, 20, 0), \n        color(176, 79, 0), \n        color(255, 166, 0)\n    ], \n    [], \n];\nfor (var i = 0; i &lt; 16 * 16; i ++) {\n    wood[1].push(round(random(0, wood[0].length - 1)));\n}\nvar character = [\n    [\n        color(200, 255, 250),\n        color(255, 178, 89), \n        color(117, 45, 0), \n        color(255, 149, 0), \n        color(90, 30, 0), \n        color(255, 170, 0),\n        color(0, 0, 0), \n        color(255, 255, 255), \n        color(0, 128, 255), \n        color(240, 150, 60), \n        color(255, 200, 100), \n        color(128, 0, 0)\n    ], \n    [\n        0, 0, 0, 0, 2, 4, 2, 4, 2, 4, 2, 4, 0, 0, 0, 0, \n        0, 0, 0, 2, 4, 2, 2, 2, 4, 2, 4, 2, 2, 0, 0, 0, \n        0, 0, 2, 4, 4, 4, 4, 2, 2, 4, 2, 4, 4, 2, 0, 0, \n        0, 2, 4, 2, 4, 2, 2, 4, 2, 2, 4, 2, 4, 4, 2, 0, \n        0, 4, 2, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 4, 0, \n        0, 5, 3, 5, 5, 3, 5, 5, 3, 5, 5, 3, 5, 5, 3, 0, \n        2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 2, 4, 2, 2, 4, \n        0, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 0, \n        0, 10, 10, 6, 6, 6, 1, 1, 1, 1, 6, 6, 6, 9, 9, 0, \n        0, 10, 10, 7, 8, 7, 1, 1, 1, 1, 7, 8, 7, 9, 9, 0, \n        0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 0, \n        0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 0, \n        0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 0, \n        0, 10, 10, 1, 1, 11, 11, 11, 11, 11, 11, 1, 1, 9, 9, 0, \n        0, 0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 0, 0, \n        0, 0, 0, 10, 10, 1, 1, 1, 1, 1, 1, 9, 9, 0, 0, 0, \n    ]\n];\nvar spikes = [\n    [\n        color(200, 255, 250), \n        color(0, 0, 0), \n        color(255, 0, 0)\n    ], \n    [\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n        0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, \n        0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, \n        0, 2, 1, 2, 0, 0, 0, 2, 2, 0, 0, 0, 1, 2, 1, 0, \n        0, 1, 1, 1, 0, 0, 0, 1, 2, 1, 0, 0, 1, 1, 1, 2, \n        0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, \n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n    ], \n];\nvar heart = [\n    [\n        color(200, 255, 250),\n        color(255, 55, 0), \n        color(155, 0, 0), \n        color(255, 155, 100), \n        color(200, 200, 200), \n        color(50, 50, 50), \n        color(150, 150, 150)\n    ], \n    [\n        0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, \n        0, 0, 0, 2, 3, 3, 2, 0, 0, 0, 2, 3, 3, 2, 0, 0, \n        0, 0, 2, 3, 3, 3, 3, 2, 0, 2, 3, 3, 3, 1, 2, 0, \n        0, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 1, 1, 2, \n        0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2, \n        0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 2, \n        0, 2, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 2, \n        0, 2, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 2, \n        0, 2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, \n        0, 0, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, \n        0, 0, 0, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, \n        0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, \n        0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,\n    ], \n    [\n        0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, \n        0, 0, 0, 5, 4, 4, 5, 0, 0, 0, 5, 4, 4, 5, 0, 0, \n        0, 0, 5, 4, 4, 4, 4, 5, 0, 5, 4, 4, 4, 6, 5, 0, \n        0, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 6, 6, 6, 5, \n        0, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 5, \n        0, 5, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 5, \n        0, 5, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 5, \n        0, 5, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 5, \n        0, 5, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 5, \n        0, 0, 5, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 5, 0, \n        0, 0, 0, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 5, 0, 0, \n        0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 5, 0, 0, 0, \n        0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 5, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 5, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 5, 6, 5, 0, 0, 0, 0, 0, 0, \n        0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0,\n    ], \n];\n\nfunction drawBitmap(colors, input, x, y, w, h) {\n    var sz = sqrt(input.length);\n    for (var i = 0; i &lt; input.length; i ++) {\n        if (colors[input[i]] !== -3604486) {\n            fill(colors[input[i]]);\n            noStroke();\n            rect(x + (i % sz) * w / sz, y + floor(i / sz) * h / sz, w / sz, h / sz);\n        }\n    }\n}\n\nbackground(0, 0);\nvar g = [];\ndrawBitmap(grass[0], grass[1], 0, 0, width, height);\ng.push(get());\nbackground(0, 0);\ndrawBitmap(grass[0], grass[2], 0, 0, width, height);\ng.push(get());\nbackground(0, 0);\ndrawBitmap(grass[0], grass[3], 0, 0, width, height);\ng.push(get());\n\nvar d = [];\ndrawBitmap(dirt[0], dirt[1], 0, 0, width, height);\nd.push(get());\nvar s = [];\ndrawBitmap(stone[0], stone[1], 0, 0, width, height);\ns.push(get());\ndrawBitmap(stone[0], stone[2], 0, 0, width, height);\ns.push(get());\nvar a = [];\nbackground(0, 0);\ndrawBitmap(spikes[0], spikes[1], 0, 0, width, height);\na.push(get());\nvar w = [];\ndrawBitmap(wood[0], wood[1], 0, 0, width, height);\nw.push(get());\nvar p = [];\nbackground(0, 0);\ndrawBitmap(portal[0], portal[1], 0, 0, width, height);\np.push(get());\nvar h = [];\nbackground(0, 0);\ndrawBitmap(heart[0], heart[1], 0, 0, width, height);\nh.push(get());\nbackground(0, 0);\ndrawBitmap(heart[0], heart[2], 0, 0, width, height);\nh.push(get());\n\n// } Graphics\n\nfunction setupLevel() {\n    var current = maps[level];\n    for (var i = 0; i &lt; current.length; i ++) {\n        var splited2 = current[i].split(\"\");\n        for (var j = 0; j &lt; splited2.length; j ++) {\n            if (splited2[j] === \"@\") {\n                x = (j * width / mapWidth) - (width / 2) + (width / mapWidth / 2);\n                y = (i * height / mapHeight) - (height / 2) + (height / mapHeight / 2);\n            }\n        }\n    }\n    levelStarted = true;\n    lives = 3;\n}\n\nfunction drawLevel() {\n    falling = true;\n    moveRight = true;\n    moveLeft = true;\n    canJump = true;\n    damage = false;\n    \n    var current = maps[level];\n    for (var i = 0; i &lt; current.length; i ++) {\n        var splited2 = current[i].split(\"\");\n        for (var j = 0; j &lt; splited2.length; j ++) {\n            var collisions = [false, false, false, false];\n            if (j * (width / mapWidth) - x > (width / 2 - (width / mapWidth * 1.5)) && j * (width / mapWidth) - x &lt; (width / 2 + (width / mapWidth / 2)) && i * (height / mapHeight) - y >= (height / 2 - (height / mapHeight * 1.5)) && i * (height / mapHeight) - y &lt;= (height / 2 - (height / mapHeight * 1.5)) + 10) {\n                collisions[0] = true;\n            }\n            if (j * (width / mapWidth) - x > (width / 2 - (width / mapWidth * 1.5)) && j * (width / mapWidth) - x &lt; (width / 2 + (width / mapWidth / 2)) && i * (width / mapHeight) - y &lt;= (height / 2 + (height / mapHeight / 2)) && i * (width / mapHeight) - y >= (height / 2 + (height / mapHeight / 2)) - 10) {\n                collisions[1] = true;\n            }\n            if (i * (height / mapHeight) - y > (height / 2 - (height / mapHeight * 1.5)) && i * (width / mapHeight) - y &lt; (height / 2 + (height / mapHeight / 2)) && j * (width / mapWidth) - x &lt;= (width / 2 + (width / mapWidth / 2)) && j * (width / mapWidth) - x >= (width / 2 + (width / mapWidth / 2)) - 10) {\n                collisions[2] = true;\n            }\n            if (i * (height / mapHeight) - y > (height / 2 - (height / mapHeight * 1.5)) && i * (width / mapHeight) - y &lt; (height / 2 + (height / mapHeight / 2)) && j * (width / mapWidth) - x >= (width / 2 - (width / mapWidth * 1.5)) && j * (width / mapWidth) - x &lt;= (width / 2 - (width / mapWidth * 1.5)) + 10) {\n                collisions[3] = true;\n            }\n            \n            if (splited2[j] === \"x\") {\n                image(d[0], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n                /*fill(0, 0, 0);\n                noStroke();\n                rect(j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);*/\n                \n                if (collisions[0] === true) {\n                    canJump = false;\n                    jumpDir = false;\n                }\n                if (collisions[1] === true) {\n                    falling = false;\n                }\n                if (collisions[2] === true) {\n                    moveRight = false;\n                }\n                if (collisions[3] === true) {\n                    moveLeft = false;\n                }\n            }\n            if (splited2[j] === \"X\") {\n                image(s[0], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n                \n                if (collisions[0] === true) {\n                    canJump = false;\n                    jumpDir = false;\n                }\n                if (collisions[1] === true) {\n                    falling = false;\n                }\n                if (collisions[2] === true) {\n                    moveRight = false;\n                }\n                if (collisions[3] === true) {\n                    moveLeft = false;\n                }\n            }\n            if (splited2[j] === \"w\") {\n                image(w[0], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n                \n                if (collisions[0] === true) {\n                    canJump = false;\n                    jumpDir = false;\n                }\n                if (collisions[1] === true) {\n                    falling = false;\n                }\n                if (collisions[2] === true) {\n                    moveRight = false;\n                }\n                if (collisions[3] === true) {\n                    moveLeft = false;\n                }\n            }\n            if (splited2[j] === \"A\") {\n                image(a[0], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n                \n                if (j * (width / mapWidth) - x > (width / 2 - (width / mapWidth * 1.5)) && j * (width / mapWidth) - x &lt; (width / 2 + (width / mapWidth / 2)) && i * (height / mapHeight) - y > (height / 2 - (height / mapHeight * 1.5)) && i * (width / mapHeight) - y &lt; (height / 2)) {\n                    //levelStarted = false;\n                    if (damage === false) {\n                        jumpDir = true;\n                        jumping = 1;\n                        lives --;\n                        if (lives &lt;= 0) {\n                            levelStarted = false;\n                        }\n                        damage = true;\n                    }\n                }\n            }\n            if (splited2[j] === \"a\") {\n                image(s[1], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n                image(a[0], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n                \n                if (j * (width / mapWidth) - x > (width / 2 - (width / mapWidth * 1.5)) && j * (width / mapWidth) - x &lt; (width / 2 + (width / mapWidth / 2)) && i * (height / mapHeight) - y > (height / 2 - (height / mapHeight * 1.5)) && i * (width / mapHeight) - y &lt; (height / 2)) {\n                    //levelStarted = false;\n                    if (damage === false) {\n                        jumpDir = true;\n                        jumping = 1;\n                        lives --;\n                        if (lives &lt;= 0) {\n                            levelStarted = false;\n                        }\n                        damage = true;\n                    }\n                }\n            }\n            if (splited2[j] === \",\") {\n                image(g[round(frameCount / 10) % 3], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n            }\n            if (splited2[j] === \"c\") {\n                image(s[1], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n            }\n            if (splited2[j] === \"*\") {\n                image(p[0], j * (width / mapWidth) - x, i * (height / mapHeight) - y, width / mapWidth, height / mapHeight);\n                \n                if (collisions[0] === true || collisions[1] === true || collisions[2] === true || collisions[3] === true) {\n                    level ++;\n                    levelStarted = false;\n                }\n            }\n        }\n    }\n    \n    textFont(tf);\n    var cc = comments[level];\n    for (var i = 0; i &lt; cc.length; i += 4) {\n        if (cc[i + 3] === false) {\n            fill(0, 0, 0);\n        }\n        else {\n            fill(255, 255, 255);\n        }\n        textSize(20);\n        text(cc[i], cc[i + 1] - x, cc[i + 2] - y);\n    }\n}\n\nfunction player() {\n    /*fill(255, 0, 0);\n    noStroke();\n    rect(width / 2 - (width / mapWidth / 2), height / 2 - (height / mapHeight / 2), width / mapWidth, height / mapHeight);*/\n    drawBitmap(character[0], character[1], width / 2 - (width / mapWidth / 2), height / 2 - (height / mapHeight / 2), width / mapWidth / 2 * 2, height / mapHeight / 2 * 2);\n    \n    if (keys[100] === true || keys2[39] === true) {\n        if (moveRight === true) {\n            x += plSpeed;\n        }\n    }\n    if (keys[97] === true || keys2[37] === true) {\n        if (moveLeft === true) {\n            x -= plSpeed;\n        }\n    }\n    if (keys[119] === true || keys2[38] === true) {\n        if (falling === false && canJump === true) {\n            jumping = 1;\n        }\n    }\n    if (falling === true) {\n        y += 5;\n    }\n    if (jumping !== 0) {\n        if (jumpDir === true) {\n            jumping += 5;\n            y -= 10;\n            if (jumping >= 80) {\n                jumping = 80;\n                jumpDir = 10;\n            }\n        }\n        else if (jumpDir === false) {\n            jumping -= 5;\n            if (jumping &lt;= 0 || falling === false) {\n                jumping = 0;\n                jumpDir = true;\n            }\n        }\n        else {\n            jumping += jumpDir - 5;\n            y -= jumpDir;\n            jumpDir --;\n            if (jumpDir &lt;= 0) {\n                jumpDir = false;\n            }\n        }\n    }\n    if (jumping === 0) {\n        jumpDir = true;\n    }\n    if (y > maps[level].length * 40) {\n        levelStarted = false;\n    }\n}\n\nfunction drawTop() {\n    drawBitmap(portal[0], portal[1], 10, 10, 60, 60);\n    fill(255, 200, 50);\n    noStroke();\n    rect(40, 25, 25, 30);\n    fill(205, 150, 0);\n    noStroke();\n    rect(15, 25, 25, 30);\n    drawBitmap(character[0], character[1], 20, 20, 40, 40);\n    \n    for (var i = 0; i &lt; 3; i ++) {\n        if (lives > i) {\n            image(h[0], 10 + i * 20, 80, 16, 16);\n        }\n        else {\n            image(h[1], 10 + i * 20, 80, 16, 16);\n        }\n    }\n}\n\nfunction drawBck() {\n    pushMatrix();\n    scale(width / 600);\n    for (var i = 0; i &lt; 8; i ++) {\n        for (var j = 0; j &lt;= i / 2; j ++) {\n            if (j === floor(i / 2)) {\n                image(g[0], i * 40 - 40, 600 - 40 - j * 40, 40, 40);\n            }\n            else {\n                image(d[0], i * 40 - 40, 600 - 40 - j * 40, 40, 40);\n            }\n        }\n    }\n    for (var i = 0; i &lt; 8; i ++) {\n        for (var j = 0; j &lt; 4 - i / 4; j ++) {\n            image(s[0], i * 40 + 280, 600 - 40 - j * 40, 40, 40);\n        }\n        for (var j = round(4 - i / 4); j &lt; 8; j ++) {\n            image(s[1], i * 40 + 280, 600 - 40 - j * 40, 40, 40);\n        }\n    }\n    \n    image(s[0], 280, 280, 40, 40);\n    image(s[0], 280, 320, 40, 40);\n    image(s[0], 320, 240, 40, 40);\n    image(s[0], 360, 280, 40, 40);\n    image(s[0], 400, 280, 40, 40);\n    image(s[0], 440, 280, 40, 40);\n    image(s[0], 480, 280, 40, 40);\n    image(s[0], 520, 280, 40, 40);\n    image(s[0], 560, 280, 40, 40);\n    image(s[0], 560, 320, 40, 40);\n    image(s[0], 520, 320, 40, 40);\n    image(s[0], 520, 360, 40, 40);\n    image(s[0], 520, 240, 40, 40);\n    image(s[0], 240, 560, 40, 40);\n    image(s[0], 200, 560, 40, 40);\n    \n    image(a[0], 360, 400, 40, 40);\n    image(a[0], 400, 440, 40, 40);\n    image(a[0], 560, 480, 40, 40);\n    \n    drawBitmap(character[0], character[1], 500, 440, 40, 40);\n    \n    fill(255, 255, 255, 150);\n    noStroke();\n    rect(0, 0, 600, 600);\n    popMatrix();\n}\n\nfunction drawMenuPage() {\n    drawBck();\n    \n    pushMatrix();\n    scale(width / 600);\n    \n    fill(0, 0, 0);\n    textSize(70);\n    text(\"Jungle adventure\", 300, 70);\n    \n    textSize(30);\n    text(\"by Infinite coder\", 300, 120);\n    \n    noFill();\n    stroke(0, 0, 0);\n    strokeWeight(5);\n    rect(75, 180, 450, 60);\n    rect(75, 260, 200, 60);\n    rect(325, 260, 200, 60);\n    rect(75, 340, 450, 60);\n    \n    textSize(50);\n    text(\"Play\", 300, 210);\n    text(\"How\", 175, 290);\n    text(\"Story\", 425, 290);\n    text(\"Create your own levels\", 300, 370);\n    \n    if (mouseX > 75 && mouseX &lt; 525 && mouseY > 180 && mouseY &lt; 240) {\n        cursor(HAND);\n        if (mouse === true) {\n            mouse = false;\n            playing = true;\n        }\n    }\n    if (mouseX > 75 && mouseX &lt; 275 && mouseY > 260 && mouseY &lt; 320) {\n        cursor(HAND);\n        if (mouse === true) {\n            mouse = false;\n            page = \"how\";\n        }\n    }\n    if (mouseX > 325 && mouseX &lt; 525 && mouseY > 260 && mouseY &lt; 320) {\n        cursor(HAND);\n        if (mouse === true) {\n            mouse = false;\n            page = \"story\";\n        }\n    }\n    if (mouseX > 75 && mouseX &lt; 525 && mouseY > 340 && mouseY &lt; 400) {\n        cursor(HAND);\n        if (mouse === true) {\n            mouse = false;\n            page = \"create\";\n        }\n    }\n    \n    textSize(40);\n    text(\"Winners:\", 300, 430);\n    \n    textFont(createFont(\"monospace Bold\"));\n    textSize(16);\n    for (var i = 0; i &lt; winners.length - 4; i ++) {\n        text(winners[i], (i % 3) * 200 + 100, 460 + floor(i / 3) * 18);\n    }\n    for (var i = winners.length - 4; i &lt; winners.length; i ++) {\n        text(winners[i], (i % 2) * 400 + 100, (460 - 36) + floor((i - winners.length + 4) / 2) * 18);\n    }\n    \n    textFont(createFont(\"Gabriola Bold\"));\n    popMatrix();\n}\n\nfunction drawHowPage() {\n    drawBck();\n    \n    fill(0, 0, 0);\n    textSize(70);\n    text(\"How to play\", width / 2, 70);\n    \n    textSize(30);\n    textAlign(LEFT, TOP);\n    text(\"1. Use WASD or arrow keys to move. \\n2. Don't touch the spikes. \\n3. Go to the portal to advance. \", 15, 130);\n    textAlign(CENTER, CENTER);\n    \n    noFill();\n    stroke(0, 0, 0);\n    strokeWeight(3);\n    rect(10, 10, 100, 30);\n    \n    fill(0, 0, 0);\n    textSize(25);\n    text(\"&lt; Menu\", 60, 25);\n    \n    if (mouseX > 10 && mouseX &lt; 110 && mouseY > 10 && mouseY &lt; 40) {\n        cursor(HAND);\n        if (mouse === true) {\n            page = \"menu\";\n        }\n    }\n}\n\nfunction drawStoryPage() {\n    drawBck();\n    \n    fill(0, 0, 0);\n    textSize(70);\n    text(\"Story\", width / 2, 70);\n    \n    textSize(30);\n    textAlign(LEFT, TOP);\n    text(\"You are lost in jungle. You have to find a way home. \", 15, 130);\n    textAlign(CENTER, CENTER);\n    \n    noFill();\n    stroke(0, 0, 0);\n    strokeWeight(3);\n    rect(10, 10, 100, 30);\n    \n    fill(0, 0, 0);\n    textSize(25);\n    text(\"&lt; Menu\", 60, 25);\n    \n    if (mouseX > 10 && mouseX &lt; 110 && mouseY > 10 && mouseY &lt; 40) {\n        cursor(HAND);\n        if (mouse === true) {\n            page = \"menu\";\n        }\n    }\n}\n\nfunction drawCreatePage() {\n    drawBck();\n    \n    fill(0, 0, 0);\n    textSize(70);\n    text(\"How to create levels\", width / 2, 70);\n    \n    textSize(22);\n    textAlign(LEFT, TOP);\n    text(\"1. Change the 'level' variable to \" + str(maps.length - 1) + \"\\n2. Go to 'maps' list (line 15) and find a line with a comment 'your level data here'\\n3. Insert your level data to the list\\n\\n\\n\\n\\n\\n\\n4. Go to 'comments' list and find a line with comment 'your comments here'\\n5. Put your comments there [comment, x, y, commentIsInCave, comment, x, y, commentIsInCave, ...]\\n6. Send your level data and comments to Tips&Thanks (if you want to share your work)\", 15, 130, width - 30, height);\n    \n    fill(100, 0, 0);\n    text(\". = air\\n x = grass block\\ng = grass\\nX = stone block\\nc = cave background\", 25, 222);\n    text(\"A = spikes\\na = spikes in a cave\\n@ = player start\\n* = portal\", 325, 222);\n    textAlign(CENTER, CENTER);\n    \n    noFill();\n    stroke(0, 0, 0);\n    strokeWeight(3);\n    rect(10, 10, 100, 30);\n    \n    fill(0, 0, 0);\n    textSize(25);\n    text(\"&lt; Menu\", 60, 25);\n    \n    if (mouseX > 10 && mouseX &lt; 110 && mouseY > 10 && mouseY &lt; 40) {\n        cursor(HAND);\n        if (mouse === true) {\n            page = \"menu\";\n        }\n    }\n}\n\ndraw = function() {\n    cursor(ARROW);\n    background(200, 255, 250);\n    if (levelStarted === false) {\n        setupLevel();\n    }\n    if (playing === true) {\n        if (level &lt; 5) {\n            drawLevel();\n            player();\n            drawTop();\n        }\n        else {\n            if (continuePlaying === false) {\n                textFont(createFont(\"Gabriola Bold\"));\n                background(0, 0, 0);\n                fill(255, 255, 255);\n                textSize(70);\n                text(\"You won!\", width / 2, 70);\n                textSize(30);\n                text(\"Thanks for playing\", width / 2, 120);\n                text(\"Do you want to play user-made levels?\", width / 2, 300);\n                noFill();\n                stroke(255, 255, 255);\n                strokeWeight(5);\n                rect(75, 350, width - 150, 60);\n                \n                fill(255, 255, 255);\n                textSize(50);\n                text(\"Continue playing\", width / 2, 380);\n                \n                if (mouseX > 75 && mouseX &lt; width - 75 && mouseY > 350 && mouseY &lt; 410) {\n                    cursor(HAND);\n                    if (mouse === true) {\n                        continuePlaying = true;\n                    }\n                }\n                \n                if (pl === false) {\n                    pl = true;\n                    println(\"Subscribe, if you like: \\nhttps://www.khanacademy.org/computer-programming/my-subpage/6251203022864384\\n\\nSee my other projects: \\nhttps://www.khanacademy.org/profile/markusprograms/projects\");\n                }\n            }\n            else {\n                if (level &lt; maps.length && level &lt; maps.length - 1 || maps[maps.length - 1][0] !== undefined && level === maps.length - 1) {\n                    drawLevel();\n                    player();\n                    drawTop();\n                }\n                else {\n                    textFont(createFont(\"Gabriola Bold\"));\n                    background(0, 0, 0);\n                    fill(255, 255, 255);\n                    textSize(70);\n                    text(\"Now you won all levels!\", width / 2, 70);\n                    textSize(30);\n                    text(\"You can make your own! \", width / 2, 120);\n                }\n            }\n        }\n    }\n    else {\n        if (page === \"menu\") {\n            drawMenuPage();\n        }\n        if (page === \"how\") {\n            drawHowPage();\n        }\n        if (page === \"story\") {\n            drawStoryPage();\n        }\n        if (page === \"create\") {\n            drawCreatePage();\n        }\n    }\n};\n\nfunction keyPressed() {\n    keys[key.code] = true;\n    keys2[keyCode] = true;\n}\nfunction keyReleased() {\n    keys[key.code] = false;\n    keys2[keyCode] = false;\n}\nfunction mousePressed() {\n    mouse = true;\n}\nfunction mouseReleased() {\n    mouse = false;\n}\n","voteCount":103,"forkCount":8};
}